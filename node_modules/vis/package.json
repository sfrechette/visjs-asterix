{
  "name": "vis",
  "version": "3.5.0",
  "description": "A dynamic, browser-based visualization library.",
  "homepage": "http://visjs.org/",
  "repository": {
    "type": "git",
    "url": "git://github.com/almende/vis.git"
  },
  "keywords": [
    "vis",
    "visualization",
    "web based",
    "browser based",
    "javascript",
    "chart",
    "linechart",
    "timeline",
    "graph",
    "network",
    "browser"
  ],
  "main": "./index",
  "scripts": {
    "test": "mocha",
    "build": "gulp",
    "watch": "gulp watch",
    "watch-dev": "gulp watch --bundle"
  },
  "dependencies": {
    "emitter-component": "^1.1.1",
    "hammerjs": "^1.1.0",
    "moment": "^2.7.0",
    "mousetrap": "0.0.1"
  },
  "devDependencies": {
    "clean-css": "latest",
    "gulp": "^3.8.5",
    "gulp-concat": "^2.2.0",
    "gulp-minify-css": "^0.3.6",
    "gulp-rename": "^1.2.0",
    "gulp-util": "^2.2.19",
    "merge-stream": "^0.1.5",
    "mocha": "^1.20.1",
    "rimraf": "^2.2.8",
    "uglify-js": "^2.4.14",
    "webpack": "^1.3.1-beta7",
    "wrench": "latest",
    "yargs": "^1.2.6"
  },
  "readme": "vis.js\n==================\n\nVis.js is a dynamic, browser based visualization library.\nThe library is designed to be easy to use, handle large amounts\nof dynamic data, and enable manipulation of the data.\nThe library consists of the following components:\n\n- DataSet and DataView. A flexible key/value based data set. Add, update, and \n  remove items. Subscribe on changes in the data set. A DataSet can filter and \n  order items, and convert fields of items.\n- DataView. A filtered and/or formatted view on a DataSet.\n- Graph2d. Plot data on a timeline with lines or barcharts.\n- Graph3d. Display data in a three dimensional graph.\n- Network. Display a network (force directed graph) with nodes and edges.\n- Timeline. Display different types of data on a timeline.\n\nThe vis.js library is developed by [Almende B.V](http://almende.com).\n\n\n## Install\n\nInstall via npm:\n\n    npm install vis\n\nInstall via bower:\n\n    bower install vis\n\nOr download the library from the github project:\n[https://github.com/almende/vis.git](https://github.com/almende/vis.git).\n\n\n## Load\n\n\nTo use a component, include the javascript and css files of vis in your web page:\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <script src=\"components/vis/dist/vis.js\"></script>\n  <link href=\"components/vis/dist/vis.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n  <script type=\"text/javascript\">\n    // ... load a visualization\n  </script>\n</body>\n</html>\n```\n\nor load vis.js using require.js. Note that vis.css must be loaded too.\n\n```js\nrequire.config({\n  paths: {\n    vis: 'path/to/vis/dist',\n  }\n});\nrequire(['vis'], function (math) {\n  // ... load a visualization\n});\n```\n\n\nA timeline can be instantiated as:\n\n```js\nvar timeline = new vis.Timeline(container, data, options);\n```\n\nWhere `container` is an HTML element, `data` is an Array with data or a DataSet,\nand `options` is an optional object with configuration options for the\ncomponent.\n\n\n## Example\n\nA basic example on loading a Timeline is shown below. More examples can be\nfound in the [examples directory](https://github.com/almende/vis/tree/master/examples)\nof the project.\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <title>Timeline basic demo</title>\n  <script src=\"vis/dist/vis.js\"></script>\n  <link href=\"vis/dist/vis.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n  <style type=\"text/css\">\n    body, html {\n      font-family: sans-serif;\n    }\n  </style>\n</head>\n<body>\n<div id=\"visualization\"></div>\n\n<script type=\"text/javascript\">\n  var container = document.getElementById('visualization');\n  var data = [\n    {id: 1, content: 'item 1', start: '2013-04-20'},\n    {id: 2, content: 'item 2', start: '2013-04-14'},\n    {id: 3, content: 'item 3', start: '2013-04-18'},\n    {id: 4, content: 'item 4', start: '2013-04-16', end: '2013-04-19'},\n    {id: 5, content: 'item 5', start: '2013-04-25'},\n    {id: 6, content: 'item 6', start: '2013-04-27'}\n  ];\n  var options = {};\n  var timeline = new vis.Timeline(container, data, options);\n</script>\n</body>\n</html>\n```\n\n\n## Build\n\nTo build the library from source, clone the project from github\n\n    git clone git://github.com/almende/vis.git\n\nThe source code uses the module style of node (require and module.exports) to\norganize dependencies. To install all dependencies and build the library, \nrun `npm install` in the root of the project.\n\n    cd vis\n    npm install\n\nThen, the project can be build running:\n\n    npm run build\n\nTo automatically rebuild on changes in the source files, once can use\n\n    npm run watch\n\nThis will both build and minify the library on changes. Minifying is relatively\nslow, so when only the non-minified library is needed, one can use the \n`watch-dev` script instead:\n\n    npm run watch-dev\n\n\n## Custom builds\n\nThe folder `dist` contains bundled versions of vis.js for direct use in the browser. These bundles contain the all visualizations and includes external dependencies such as hammer.js and moment.js.\n\nThe source code of vis.js consists of commonjs modules, which makes it possible to create custom bundles using tools like [Browserify](http://browserify.org/) or [Webpack](http://webpack.github.io/). This can be bundling just one visualization like the Timeline, or bundling vis.js as part of your own browserified web application. \n\n*Note that hammer.js version 1 is required (v1.0.6-v1.1.3), version 2 is not yet supported.*\n\n#### Example 1: Bundle a single visualization\n\nFor example, to create a bundle with just the Timeline and DataSet, create an index file named **custom.js** in the root of the project, containing: \n\n```js\nexports.DataSet = require('./lib/DataSet');\nexports.Timeline = require('./lib/timeline/Timeline');\n```\n\nInstall browserify globally via `[sudo] npm install -g browserify`, then create a custom bundle like:\n\n    browserify custom.js -o vis-custom.js -s vis\n\nThis will generate a custom bundle *vis-custom.js*, which exposes the namespace `vis` containing only `DataSet` and `Timeline`. The generated bundle can be minified with uglifyjs (installed globally with `[sudo] npm install -g uglify-js`):\n\n    uglifyjs vis-custom.js -o vis-custom.min.js\n\nThe custom bundle can now be loaded like:\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <script src=\"vis-custom.min.js\"></script>\n  <link href=\"dist/vis.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n  ...\n</body>\n</html>\n```\n\n#### Example 2: Exclude external libraries\n\nThe default bundle `vis.js` is standalone and includes external dependencies such as hammer.js and moment.js. When these libraries are already loaded by the application, vis.js does not need to include these dependencies itself too. To build a custom bundle of vis.js excluding moment.js and hammer.js, run browserify in the root of the project:\n\n    browserify index.js -o vis-custom.js -s vis -x moment -x hammerjs\n    \nThis will generate a custom bundle *vis-custom.js*, which exposes the namespace `vis`, and has moment and hammerjs excluded. The generated bundle can be minified with uglifyjs:\n\n    uglifyjs vis-custom.js -o vis-custom.min.js\n\nThe custom bundle can now be loaded as:\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <!-- load external dependencies -->\n  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/moment.js/2.7.0/moment.min.js\"></script>\n  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/hammer.js/1.1.3/hammer.min.js\"></script>\n\n  <!-- load vis.js -->\n  <script src=\"vis-custom.min.js\"></script>\n  <link href=\"dist/vis.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n  ...\n</body>\n</html>\n```\n\n#### Example 3: Bundle vis.js as part of your (commonjs) application\n\nWhen writing a web application with commonjs modules, vis.js can be packaged automatically into the application. Create a file **app.js** containing:\n\n```js\nvar moment = require('moment');\nvar DataSet = require('vis/lib/DataSet');\nvar Timeline = require('vis/lib/timeline/Timeline');\n\nvar container = document.getElementById('visualization');\nvar data = new DataSet([\n  {id: 1, content: 'item 1', start: moment('2013-04-20')},\n  {id: 2, content: 'item 2', start: moment('2013-04-14')},\n  {id: 3, content: 'item 3', start: moment('2013-04-18')},\n  {id: 4, content: 'item 4', start: moment('2013-04-16'), end: moment('2013-04-19')},\n  {id: 5, content: 'item 5', start: moment('2013-04-25')},\n  {id: 6, content: 'item 6', start: moment('2013-04-27')}\n]);\nvar options = {};\nvar timeline = new Timeline(container, data, options);\n```\n\nInstall the application dependencies via npm:\n\n    npm install vis moment\n\nThe application can be bundled and minified:\n\n    browserify app.js -o app-bundle.js\n    uglifyjs app-bundle.js -o app-bundle.min.js\n\nAnd loaded into a webpage:\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <link href=\"node_modules/vis/dist/vis.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n  <div id=\"visualization\"></div>\n  \n  <script src=\"app-bundle.min.js\"></script>\n</body>\n</html>\n```\n\n\n## Test\n\nTo test the library, install the project dependencies once:\n\n    npm install\n\nThen run the tests:\n\n    npm test\n\n\n## License\n\nCopyright (C) 2010-2014 Almende B.V.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/almende/vis/issues"
  },
  "_id": "vis@3.5.0",
  "dist": {
    "shasum": "aace0cad64fc26d89975a10ab9d3eb6b08a8fabe"
  },
  "_from": "vis@",
  "_resolved": "https://registry.npmjs.org/vis/-/vis-3.5.0.tgz"
}
